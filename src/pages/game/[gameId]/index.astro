---
  import { handleError } from '@lib/database'
	import Layout from '@layouts/layout.astro'
  import Game from '@components/games/Game.svelte'
  import GameSettings from '@components/games/GameSettings.svelte'

  const { supabase, user } = Astro.locals
  const { gameId } = Astro.params

  const showSettings = Astro.url.searchParams.get('settings')

  const { data: gameData, error } = await supabase.from('games').select('id, name, category, intro, info, secrets, owner:profiles(id, name), discussion_thread, game_thread, system, openai_thread, openai_storyteller, custom_header').eq('id', gameId).single()
  if (error) { handleError(error) }

  const { data: characterData, error: error2 } = await supabase.from('characters').select('id, name, player:profiles(id, name), portrait, open, storyteller, hidden, state, accepted').eq('game', gameId)
  if (error2) { handleError(error2) }

  const { data: unreadData, error: error3 } = await supabase.rpc('get_game_unread', { game: gameId, game_thread: gameData.game_thread, discussion_thread: gameData.discussion_thread })
  if (error3) { handleError(error3) }
  if (unreadData) { gameData.unread = unreadData }

  if (gameData && characterData) {
    // filter out hidden characters for regular players
    gameData.characters = gameData.owner.id === user.id ? characterData : characterData.filter((char) => !char.hidden || char.player.id === user.id) // @ts-nocheck
  }
---

<script>
  import { lookForToast } from '@lib/toasts'
  lookForToast()
</script>

<Layout title={gameData?.name} header={gameData?.custom_header ? 'game-' + gameData.id : null}>
  {(showSettings ? (
    <GameSettings data={gameData} {user} client:only />
  ) : (
    <Game data={gameData} {user} client:only />
  ))}
</Layout>
