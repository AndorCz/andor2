---
  import Layout from '@layouts/layout.astro'
  import Latest from '@components/homepage/Latest.svelte'
  import NewsFeed from '@components/homepage/NewsFeed.svelte'
  import NewsItem from '@components/homepage/NewsItem.svelte'
  import Editorial from '@components/homepage/Editorial.svelte'
  import PotwAnnouncement from '@components/homepage/PotwAnnouncement.svelte'

  let newsError, lastEditorial, news, maxPage, npcPost, potw, potwWeekId
        const { supabase, user } = Astro.locals
	const params = Object.fromEntries(Astro.url.searchParams)

	try {
		const res = await supabase.from('works').select('*').is('editorial', true).order('created_at', { ascending: false }).limit(1).maybeSingle()
		if (res.error) { throw res.error }
		lastEditorial = res.data
	} catch (error) {
		newsError = 'Chyba načtení editorialu: ' + error.message
	}

  const publishedOnly = params.preview ? false : true // preview unpublished news
  const page = params.page ? parseInt(params.page) : 0
  const limit = 5
  try {
    const res2 = await supabase.from('news_reactions').select('*', { count: 'exact' }).eq('published', publishedOnly).order('created_at', { ascending: false }).range(page * limit, page * limit + limit - 1)
    if (res2.error) { throw res2.error }
    news = res2.data
    maxPage = Math.ceil(res2.count / limit) - 1
  } catch (error) {
    newsError = 'Chyba načtení novinek: ' + error.message
  }

  // Check if we should show npcPost (only if last news is older than 3 days or no news exists)
  let shouldShowNpcPost = false
  if (news && news.length > 0) {
    const lastNewsDate = new Date(news[0].created_at)
    const threeDaysAgo = new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
    shouldShowNpcPost = lastNewsDate < threeDaysAgo
  } else {
    shouldShowNpcPost = true // Show if no news exists
  }

  if (shouldShowNpcPost) {
    try {
      const { data: randomPost, error: randomPostError } = await supabase.from('npc_posts_random').select('id, content, owner, owner_name, created_at, concept_id, concept_name').limit(1).maybeSingle()
      if (randomPostError) { throw randomPostError }
      if (randomPost) {
        npcPost = { id: randomPost.id, content_type: 'post', title: randomPost.concept_name, game_url: `/solo/concept/${randomPost.concept_id}`, content: randomPost.content, character: randomPost.owner, character_name: randomPost.owner_name, created_at: randomPost.created_at, owner_id: user?.id }
      }
    } catch (error) {
      newsError = 'Chyba načtení příspěvku: ' + error.message
    }
  }

  // Post of the week winner announcement
  const today = new Date()
  if (today.getDay() === 1) {
    const currentWeekStart = new Date(today)
    currentWeekStart.setHours(0, 0, 0, 0)
    currentWeekStart.setDate(currentWeekStart.getDate() - ((currentWeekStart.getDay() + 6) % 7))
    const previousWeekStart = new Date(currentWeekStart)
    previousWeekStart.setDate(previousWeekStart.getDate() - 7)
    potwWeekId = currentWeekStart.toISOString().slice(0, 10)
    try {
      const { data: weekPosts, error: potwError } = await supabase
        .from('game_posts_owner')
        .select('*')
        .gte('created_at', previousWeekStart.toISOString())
        .lt('created_at', currentWeekStart.toISOString())
        .or('audience.is.null,audience.eq.{}')
      if (potwError) { throw potwError }
      if (weekPosts && weekPosts.length) {
        potw = weekPosts.reduce((best, p) => ((p.hearts?.length || 0) > (best.hearts?.length || 0) ? p : best), weekPosts[0])
      }
    } catch (error) {
      // ignore errors, don't block page rendering
    }
  }
---

<Layout title='RPG hry online: Dračí Doupě (DrD), Dungeons and Dragons (D&D, DnD), AI vypravěč'>
  {!user.id ? (
    <h1>TTRPG: Stolní RPG hry online - Dračí Doupě (DrD), Dungeons and Dragons (D&D, DnD) a další</h1>
  ) : null}
  {newsError ? <p>{newsError}</p> : <Editorial {lastEditorial} client:only='svelte' />}
  <PotwAnnouncement winner={potw} weekId={potwWeekId} client:only='svelte' />
        <main>
		<aside>
			<Latest client:only='svelte' />
		</aside>
    <content>
      {npcPost ? <NewsItem {user} item={npcPost} client:only='svelte' /> : null}
      <NewsFeed {user} {news} {page} {maxPage} client:only='svelte' />
    </content>
  </main>
</Layout>

<style>
  h1 {
    font-size: 18pt;
    padding-top: 0px;
    margin-top: 0px;
    padding-bottom: 20px;
  }
	main {
		display: flex;
		gap: 20px;
	}
		aside {
			width: 25%;
		}
		content {
			width: 75%;
		}

	@media (max-width: 500px) {
    main {
			flex-direction: column-reverse;
		}
			aside, content {
				width: 100%;
			}
  }
</style>